// Code generated by protoc-gen-grpc-redis. DO NOT EDIT.

package proto

import (
	fmt "fmt"
	uuid "github.com/google/uuid"
	redis_rpc "github.com/ksysoev/redis-rpc"
	v9 "github.com/redis/go-redis/v9"
)

// EchoService is the server API for echo.EchoService
type RPCRedisEchoService struct {
	rpcSever *redis_rpc.Server
	service  *EchoServiceService
}

func NewRedisEchoService(redis *v9.Client, grpcService *EchoServiceService) *RPCRedisEchoService {
	rpcServer := redis_rpc.NewServer(redis, "echo.EchoService", "EchoServiceGroup", uuid.New().String())
	service := &RPCRedisEchoService{
		rpcSever: rpcServer,
		service:  grpcService,
	}

	// Register handlers
	rpcServer.AddHandler("Echo", service.handleEcho)

	return service
}

func (x *RPCRedisEchoService) Serve() error {
	return x.rpcSever.Run()
}

func (x *RPCRedisEchoService) Close() {
	x.rpcSever.Close()
}

func (x *RPCRedisEchoService) handleEcho(req redis_rpc.Request) (any, error) {
	var rpcReq StringMessage

	err := req.ParseParams(&rpcReq)
	if err != nil {
		return nil, fmt.Errorf("error parsing request: %v", err)
	}

	return x.service.Echo(req.Context(), &rpcReq)
}
